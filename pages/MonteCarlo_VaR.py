import streamlit as st
import numpy as np
import matplotlib.pyplot as plt

st.title("üé≤ Simula√ß√£o de Monte Carlo para Pre√ßos de Op√ß√µes - Call Europeia (Trajet√≥rias Temporais)")

# Par√¢metros de entrada
S0 = st.number_input("Pre√ßo inicial da a√ß√£o (S‚ÇÄ)", value=100.0, step=1.0, format="%.2f")
K = st.number_input("Pre√ßo de exerc√≠cio da op√ß√£o (K)", value=105.0, step=1.0, format="%.2f")
T = st.number_input("Tempo at√© o vencimento (anos)", value=1.0, step=0.1, format="%.2f")
r = st.number_input("Taxa livre de risco anual (%)", value=5.0, step=0.1, format="%.2f") / 100
sigma = st.number_input("Volatilidade anual (%)", value=20.0, step=0.1, format="%.2f") / 100
n_sim = st.number_input("N√∫mero de simula√ß√µes", min_value=1000, max_value=100000, value=10000, step=1000)
n_steps = st.number_input("N√∫mero de passos na simula√ß√£o", min_value=10, max_value=500, value=100, step=10)

# Definindo passos de tempo
dt = T / n_steps

np.random.seed(42)  # Reprodutibilidade

# Simula√ß√£o dos pre√ßos ao longo do tempo (caminhos)
# Geramos uma matriz de incrementos normais: shape (n_sim, n_steps)
Z = np.random.standard_normal((n_sim, n_steps))

# Inicializa a matriz de pre√ßos: (n_sim, n_steps+1)
S = np.zeros((n_sim, n_steps + 1))
S[:, 0] = S0

# Calcula os pre√ßos ao longo do tempo para cada simula√ß√£o
for t in range(1, n_steps + 1):
    S[:, t] = S[:, t-1] * np.exp((r - 0.5 * sigma**2) * dt + sigma * np.sqrt(dt) * Z[:, t-1])

# Pre√ßo da a√ß√£o no vencimento para cada simula√ß√£o (√∫ltima coluna)
ST = S[:, -1]

# Payoff da op√ß√£o
payoff = np.maximum(ST - K, 0)

# Pre√ßo presente estimado da op√ß√£o
option_price = np.exp(-r * T) * np.mean(payoff)

st.write(f"### Pre√ßo estimado da op√ß√£o Call: **R$ {option_price:.2f}**")

# Plot algumas trajet√≥rias
fig, ax = plt.subplots(figsize=(10, 6))
for i in range(min(20, n_sim)):  # Mostra at√© 20 trajet√≥rias
    ax.plot(np.linspace(0, T, n_steps + 1), S[i, :], lw=1, alpha=0.7)

ax.axhline(K, color='red', linestyle='--', label="Pre√ßo de Exerc√≠cio (K)")
ax.set_xlabel("Tempo (anos)")
ax.set_ylabel("Pre√ßo da a√ß√£o")
ax.set_title("Trajet√≥rias simuladas dos pre√ßos da a√ß√£o")
ax.legend()

st.pyplot(fig)

# Explica√ß√£o resumida
st.markdown("""
---
**Como funciona a simula√ß√£o com trajet√≥rias temporais:**  
- O pre√ßo da a√ß√£o √© modelado como um movimento geom√©trico Browniano ao longo do tempo.  
- Simulamos v√°rios caminhos do pre√ßo da a√ß√£o, passo a passo, at√© o vencimento.  
- Calculamos o payoff da op√ß√£o com base no pre√ßo final de cada trajet√≥ria e descontamos para valor presente.  
- A m√©dia desses payoffs descontados √© o pre√ßo estimado da op√ß√£o.  
""")
